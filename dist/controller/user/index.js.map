{"version":3,"sources":["../../../app/controller/user/index.ts"],"names":["logger","api","post","req","res","next","user","User","body","register","password","err","createdUser","error","JSON","stringify","name","status","json","message","PASSWORD_LENGTH_ERROR","MIN_LENGTH","passportAuthenticate","handleAuthSuccessResponse","generateAccessToken"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;;;;;AAHA;AAEA;AAEA,IAAMA,MAAM,GAAG,wBAAY,MAAZ,CAAf;AAGA,IAAIC,GAAG,GAAG,sBAAV;AAEAA,GAAG,CAACC,IAAJ,CAAS,GAAT;AAAA,2FAAc,iBAAOC,GAAP,EAAqBC,GAArB,EAAoCC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,YAAAA,IADI,GACG,IAAIC,gBAAJ,CAASJ,GAAG,CAACK,IAAb,CADH;AAAA;;AAGND,6BAAKE,QAAL,CAAc,IAAIF,gBAAJ,CAASD,IAAT,CAAd,EAA8BH,GAAG,CAACK,IAAJ,CAASE,QAAvC,EAAiD,UAACC,GAAD,EAAMC,WAAN,EAAsB;AACnE,kBAAGD,GAAH,EAAQ;AACJX,gBAAAA,MAAM,CAACa,KAAP,kCAAuCC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAvC;;AACA,oBAAGA,GAAG,CAACK,IAAJ,GAAW,sBAAd,EAAsC;AAClC,yBAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CACH;AACIC,oBAAAA,OAAO,EAAE;AADb,mBADG,CAAP;AAKH,iBAND,MAMO,IAAGR,GAAG,CAACK,IAAJ,KAAaI,2BAAhB,EAAuC;AAC1C,yBAAOhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,oBAAAA,OAAO,sCAA+BE,gBAA/B;AADiB,mBAArB,CAAP;AAGH,iBAJM,MAIA,IAAGV,GAAG,CAACK,IAAJ,KAAa,qBAAhB,EAAuC;AAC1C,yBAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,oBAAAA,OAAO,EAAE;AADe,mBAArB,CAAP;AAGH;;AACD,uBAAOf,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,kBAAAA,OAAO,EAAE;AADe,iBAArB,CAAP;AAGH;;AACDhB,cAAAA,GAAG,CAACG,IAAJ,GAAWM,WAAX;AACAP,cAAAA,IAAI;AACP,aAxBD;;AAHM;AAAA;;AAAA;AAAA;AAAA;AA6BRL,YAAAA,MAAM,CAACa,KAAP;AA7BQ,6CA8BDT,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,OAAO,EAAE;AADe,aAArB,CA9BC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,KAmCAG,0BAnCA,EAoCAC,+BApCA,EAqCAC,yBArCA;eAyCevB,G","sourcesContent":["import {Router, Request, Response, NextFunction} from \"express\";\nimport User, {MIN_LENGTH, PASSWORD_LENGTH_ERROR } from \"../../model/user\";\n// import passport from \"passport\";\nimport { handleAuthSuccessResponse, generateAccessToken, passportAuthenticate } from '../auth';\n// import AuthVerify from \"../../middleware/auth\"\nimport setupLogger from \"../../config/logger\";\nconst logger = setupLogger(\"user\")\n\n\nlet api = Router();\n\napi.post(\"/\", async (req: Request, res: Response, next: NextFunction): Promise<any> => {\n    const user = new User(req.body);\n    try {\n        User.register(new User(user), req.body.password, (err, createdUser) => {\n            if(err) {\n                logger.error(`Error registering user ${JSON.stringify(err)}`);\n                if(err.name = \"MissingPasswordError\") {\n                    return res.status(400).json(\n                        {\n                            message: \"Please enter a password\",\n                        }\n                    )\n                } else if(err.name === PASSWORD_LENGTH_ERROR) {\n                    return res.status(409).json({\n                        message: `Password must be at least ${MIN_LENGTH} characters long`\n                    });\n                } else if(err.name === \"UsernameExistsError\") {\n                    return res.status(409).json({\n                        message: \"Username already exists\"\n                    });\n                }\n                return res.status(500).json({\n                    message: \"Error registering user\",\n                });\n            }\n            req.user = createdUser;\n            next();\n        })\n    } catch(err) {\n      logger.error(err);\n      return res.status(500).json({\n          message: \"Failed to register user\"\n      });\n    }\n},\npassportAuthenticate,\nhandleAuthSuccessResponse,\ngenerateAccessToken\n);\n\n\nexport default api;"],"file":"index.js"}