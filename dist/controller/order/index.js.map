{"version":3,"sources":["../../../app/controller/order/index.ts"],"names":["createOrder","req","res","next","order","Order","body","pizza_id","pizza","order_quantity","quantity","Pizza","findOne","_id","order_price","price","save","status","json","data","message","success","amount","getAllOrders","find","getOrderById","params","id"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AAEO,IAAMA,WAAW;AAAA,2FAAG,iBAAOC,GAAP,EAAqBC,GAArB,EAAoCC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,KADiB,GACT,IAAIC,iBAAJ,CAAUJ,GAAG,CAACK,IAAd,CADS;AAAA;AAGbC,YAAAA,QAHa,GAGFN,GAAG,CAACK,IAAJ,CAASE,KAHP;AAIbC,YAAAA,cAJa,GAIIR,GAAG,CAACK,IAAJ,CAASI,QAJb;AAAA;AAAA,mBAKCC,kBAAMC,OAAN,CAAc;AAACC,cAAAA,GAAG,EAACN;AAAL,aAAd,CALD;;AAAA;AAKbC,YAAAA,KALa;AAMfM,YAAAA,WANe,GAMDL,cAAc,GAAGD,KAAK,CAACO,KANtB;;AAOnB,gBAAGD,WAAW,GAAG,EAAjB,EAAqB;AACjBA,cAAAA,WAAW,GAAGA,WAAW,GAAIA,WAAW,GAAG,IAA3C;AACH,aAFD,MAEO,IAAGA,WAAW,GAAG,GAAjB,EAAsB;AACzBA,cAAAA,WAAW,GAAGA,WAAW,GAAIA,WAAW,GAAG,GAA3C;AACH;;AAAA,aAXkB,CAYnB;;AAZmB;AAAA,mBAabV,KAAK,CAACY,IAAN,EAba;;AAAA;AAclBd,YAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAClBC,cAAAA,IAAI,EAAE;AAACf,gBAAAA,KAAK,EAALA,KAAD;AACNgB,gBAAAA,OAAO,EAAE,kBADH;AAENC,gBAAAA,OAAO,EAAE,IAFH;AAGNC,gBAAAA,MAAM,EAAER;AAHF;AADY,aAArB;AAODX,YAAAA,IAAI;AArBe;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAuBZD,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBE,cAAAA,OAAO;AADiB,aAArB,CAvBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXpB,WAAW;AAAA;AAAA;AAAA,GAAjB;AA8BP;;;;;AACO,IAAMuB,YAAY;AAAA,4FAAG,kBAAOtB,GAAP,EAAqBC,GAArB,EAAoCC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJE,kBAAMmB,IAAN,EADI;;AAAA;AAClBpB,YAAAA,KADkB;AAExBF,YAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACd,cAAAA,KAAK,EAALA;AAAD,aAArB;;AAFwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZmB,YAAY;AAAA;AAAA;AAAA,GAAlB;AAKP;;;;;AACO,IAAME,YAAY;AAAA,4FAAG,kBAAOxB,GAAP,EAAqBC,GAArB,EAAoCC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEAE,kBAAMO,OAAN,CAAc;AAACC,cAAAA,GAAG,EAACZ,GAAG,CAACyB,MAAJ,CAAWC;AAAhB,aAAd,CAFA;;AAAA;AAEdvB,YAAAA,KAFc;AAAA,8CAGjBF,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,KAArB,CAHiB;;AAAA;AAAA;AAAA;AAAA,8CAKbF,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBE,cAAAA,OAAO;AADiB,aAArB,CALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZK,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import {Request, Response, NextFunction} from 'express';\nimport Pizza from '../../model/pizza';\nimport Order from '../../model/order';\n\n\n// let api = Router();\n\n\n/** api to order for Pizza, to multiply the Quantity of Pizza type they want and the Price\n * 5% discount when the order_price is above 50, and 10% discount when order_price is above 100\n * \n*/\n\nexport const createOrder = async (req: Request, res: Response, next: NextFunction) => {\n    const order = new Order(req.body);\n    try {\n        const pizza_id = req.body.pizza;\n        const order_quantity = req.body.quantity;\n        const pizza = await Pizza.findOne({_id:pizza_id});\n        let order_price = order_quantity * pizza.price;\n        if(order_price > 50) {\n            order_price = order_price - (order_price * 0.05);\n        } else if(order_price > 100) {\n            order_price = order_price - (order_price * 0.1);\n        };\n        // let amount = order_price;\n        await order.save();\n         res.status(200).json({\n            data: {order,\n            message: \"order successful\",\n            success: true,\n            amount: order_price\n        },\n        });\n        next();\n    } catch(error) {\n        return res.status(400).json({\n            message: error\n        })\n    }\n};\n\n\n/** APi to get all orders */\nexport const getAllOrders = async (req: Request, res: Response, next: NextFunction) => {\n    const order = await Order.find();\n    res.status(200).json({order});\n};\n\n/** APi to get a single order passing an ID */\nexport const getOrderById = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const order = await Order.findOne({_id:req.params.id});\n    return res.status(200).json(order);\n    }catch(error) {\n        return res.status(400).json({\n            message: error\n        })\n    }\n};\n\n\n\n\n\n\n\n"],"file":"index.js"}