{"version":3,"sources":["../../app/config/db.js"],"names":["logger","options","useNewUrlParser","useUnifiedTopology","retryWrites","dbURI","process","env","mongodbURi","mongoose","connect","error"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AADA;AAEA,IAAMA,MAAM,GAAG,wBAAY,KAAZ,CAAf;;0GAGe;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,UAAAA,OADO,GACG;AACdC,YAAAA,eAAe,EAAE,IADH;AAEd;AACA;AACAC,YAAAA,kBAAkB,EAAE,IAJN;AAKdC,YAAAA,WAAW,EAAC;AALE,WADH;AAQPC,UAAAA,KARO,GAQCC,OAAO,CAACC,GAAR,CAAYC,UARb;AAAA;AAAA;AAAA,iBAULC,qBAASC,OAAT,CAAiBL,KAAjB,EAAwBJ,OAAxB,CAVK;;AAAA;AAAA,2CAWJ,IAXI;;AAAA;AAAA;AAAA;AAaXD,UAAAA,MAAM,CAACW,KAAP,CAAa,wBAAb;AAbW,2CAcJ,IAdI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","sourcesContent":["import mongoose from \"mongoose\";\n// import bluebird from \"bluebird\";\nimport setupLogger from \"./logger\";\nconst logger = setupLogger(\"app\");\n\n\nexport default async() => {\n  const options = {\n    useNewUrlParser: true,\n    // promiseLibrary: bluebird,\n    // poolSize: 10,\n    useUnifiedTopology: true,\n    retryWrites:false\n  };\n  const dbURI = process.env.mongodbURi;\n  try {\n    await mongoose.connect(dbURI, options);\n    return true;\n  } catch (error) {\n    logger.error('error connecting to db', error)\n    return null;\n  }\n};\n"],"file":"db.js"}