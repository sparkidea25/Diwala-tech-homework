{"version":3,"sources":["../../app/config/logger.js"],"names":["combine","format","timestamp","errors","label","printf","splat","colorize","customFormat","info","message","JSON","stringify","level","sourceLabel","transports","Console","stack","exitOnError"],"mappings":";;;;;;;;;;;AAAA;;AACA,IAAQA,OAAR,GAAuEC,eAAvE,CAAQD,OAAR;AAAA,IAAiBE,SAAjB,GAAuED,eAAvE,CAAiBC,SAAjB;AAAA,IAA4BC,MAA5B,GAAuEF,eAAvE,CAA4BE,MAA5B;AAAA,IAAoCC,KAApC,GAAuEH,eAAvE,CAAoCG,KAApC;AAAA,IAA2CC,MAA3C,GAAuEJ,eAAvE,CAA2CI,MAA3C;AAAA,IAAmDC,KAAnD,GAAuEL,eAAvE,CAAmDK,KAAnD;AAAA,IAA0DC,QAA1D,GAAuEN,eAAvE,CAA0DM,QAA1D,C,CAEA;AACA;AACA;;AACA,IAAMC,YAAY,GAAGH,MAAM,CAAC,UAAAI,IAAI,EAAI;AAClC,MAAI,yBAAOA,IAAI,CAACC,OAAZ,MAAwB,QAA5B,EAAsC;AACpCD,IAAAA,IAAI,CAACC,OAAL,GAAeC,IAAI,CAACC,SAAL,CAAeH,IAAI,CAACC,OAApB,EAA6B,IAA7B,EAAmC,CAAnC,CAAf;AACD;;AACD,mBAAUD,IAAI,CAACP,SAAf,cAA4BO,IAAI,CAACI,KAAjC,eAA2CJ,IAAI,CAACL,KAAhD,gBAA2DK,IAAI,CAACC,OAAhE;AACD,CAL0B,CAA3B,C,CAOA;AACA;AACA;AACA;;eACe;AAAA,MAACI,WAAD,uEAAe,EAAf;AAAA,SAAsB,2BAAa;AAChDC,IAAAA,UAAU,EAAE,CACV,IAAIA,oBAAWC,OAAf,EADU,CADoC;AAIhDf,IAAAA,MAAM,EAAED,OAAO,CACbI,KAAK,CAAC;AAAEA,MAAAA,KAAK,EAAEU;AAAT,KAAD,CADQ,EAEbP,QAAQ,EAFK,EAGbL,SAAS,EAHI,EAIbC,MAAM,CAAC;AAAEc,MAAAA,KAAK,EAAE;AAAT,KAAD,CAJO,EAKbX,KAAK,EALQ,EAMbE,YANa,CAJiC;AAYhDU,IAAAA,WAAW,EAAE;AAZmC,GAAb,CAAtB;AAAA,C","sourcesContent":["import { format, transports, createLogger } from 'winston';\nconst { combine, timestamp, errors, label, printf, splat, colorize } = format;\n\n// Handles pretty printing objects passed to logger rather than `[object Object]\n// Does not handle string + object log message. To log this way, use %o, such as logger.info(\"some message %o\", objectToPrint)\n// Ref: https://github.com/winstonjs/winston/issues/1217\nconst customFormat = printf(info => {\n  if (typeof info.message === 'object') {\n    info.message = JSON.stringify(info.message, null, 2)\n  }\n  return `${info.timestamp} ${info.level} [${info.label}]: ${info.message}`\n})\n\n// Accepts label to be prepended for logs produced by logger and returns logger\n// Example: \n// const logger = require('../config/logger')('userController');\n// logger.info('some log')\nexport default (sourceLabel = '') => createLogger({\n  transports: [\n    new transports.Console()\n  ],\n  format: combine(\n    label({ label: sourceLabel }),\n    colorize(),\n    timestamp(),\n    errors({ stack: true }),\n    splat(),\n    customFormat,\n  ),\n  exitOnError: false\n});\n"],"file":"logger.js"}